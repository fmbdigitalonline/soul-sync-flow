
import React from "react";
import { BlueprintData } from "@/services/blueprint-service";
import { CosmicCard } from "@/components/ui/cosmic-card";
import { cn } from "@/lib/utils";
import PersonalInfoSection from "./sections/PersonalInfoSection";
import MBTIProfileSection from "./sections/MBTIProfileSection";
import HumanDesignSection from "./sections/HumanDesignSection";
import AstrologySection from "./sections/AstrologySection";
import ChineseZodiacSection from "./sections/ChineseZodiacSection";
import NumerologySection from "./sections/NumerologySection";
import { BlueprintRawDataViewer } from "@/components/ui/blueprint-raw-data-viewer";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { AlertCircle, Search } from "lucide-react";
import RawContentRenderer from "./RawContentRenderer";

export interface BlueprintViewerProps {
  data?: BlueprintData; // Changed from blueprint to data to match usage
  blueprint?: BlueprintData; // Added for backward compatibility
  className?: string;
}

const BlueprintViewer: React.FC<BlueprintViewerProps> = ({ data, blueprint, className }) => {
  // Use data or blueprint, whichever is provided
  const blueprintData = data || blueprint;
  
  if (!blueprintData) {
    return (
      <CosmicCard className={cn("p-6", className)}>
        <div className="text-center">
          <p>No blueprint data available.</p>
        </div>
      </CosmicCard>
    );
  }

  // Check if there was an error in generation
  const error = blueprintData._meta?.error || null;

  // Check if we have raw content that needs to be parsed
  const hasRawContent = blueprintData.raw_content && blueprintData.needs_parsing;

  // Check if we have citations from web search
  const hasCitations = blueprintData._meta?._citations && blueprintData._meta._citations.length > 0;

  return (
    <CosmicCard className={cn("p-6", className)}>
      <div className="text-center mb-6">
        <h2 className="text-2xl font-bold font-display">
          <span className="gradient-text">{blueprintData.user_meta.preferred_name || blueprintData.user_meta.full_name}'s Soul Blueprint</span>
        </h2>
        <p className="text-muted-foreground mt-2">
          Your unique spiritual DNA and pathway to higher alignment
        </p>
        <p className="text-xs text-muted-foreground mt-1">
          Generated by {blueprintData._meta?.generation_method || "unknown"} on {new Date(blueprintData._meta?.generation_date || Date.now()).toLocaleDateString()}
        </p>
        
        {/* Display web search indicator if we have citations */}
        {hasCitations && (
          <div className="flex items-center justify-center gap-1 mt-2">
            <Search className="h-4 w-4 text-soul-purple" />
            <span className="text-xs text-soul-purple">Generated with web search</span>
          </div>
        )}
      </div>

      {/* Display error message if present */}
      {error && (
        <Alert variant="destructive" className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Generation Error</AlertTitle>
          <AlertDescription>
            {error}
          </AlertDescription>
        </Alert>
      )}

      <PersonalInfoSection userMeta={blueprintData.user_meta} />
      
      {/* If we have raw content, use the RawContentRenderer */}
      {hasRawContent ? (
        <RawContentRenderer content={blueprintData.raw_content} className="mt-6" />
      ) : (
        <>
          {/* Only show these sections if we have data */}
          {blueprintData.cognition_mbti?.type && (
            <MBTIProfileSection mbtiData={blueprintData.cognition_mbti} />
          )}
          
          {blueprintData.energy_strategy_human_design?.type && (
            <HumanDesignSection humanDesign={blueprintData.energy_strategy_human_design} />
          )}
          
          {blueprintData.archetype_western?.sun_sign && (
            <AstrologySection astrology={blueprintData.archetype_western} />
          )}
          
          {blueprintData.archetype_chinese?.animal && (
            <ChineseZodiacSection chinese={blueprintData.archetype_chinese} />
          )}
          
          {blueprintData.values_life_path?.life_path_number && (
            <NumerologySection numerology={blueprintData.values_life_path} />
          )}
        </>
      )}
      
      {/* Display raw citations if available */}
      {hasCitations && (
        <div className="mt-6 border-t pt-6">
          <h3 className="text-lg font-medium mb-2">Research Sources</h3>
          <div className="text-sm text-muted-foreground space-y-2">
            {blueprintData._meta._citations.map((citation: any, index: number) => (
              <div key={index} className="p-2 bg-secondary/40 rounded">
                <div><strong>Source {index + 1}:</strong> {citation.text}</div>
                {citation.url && <div className="text-xs">URL: {citation.url}</div>}
              </div>
            ))}
          </div>
        </div>
      )}
      
      {/* Always show raw data viewer for debugging and transparency */}
      <BlueprintRawDataViewer
        data={blueprintData}
        rawResponse={blueprintData._meta?.raw_response}
        className="mt-6 border-t pt-6"
      />
    </CosmicCard>
  );
};

export default BlueprintViewer;
